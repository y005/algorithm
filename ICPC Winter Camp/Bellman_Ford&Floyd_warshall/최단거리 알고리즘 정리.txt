다익스트라 알고리즘
1. 양수 가중치만 존재할 경우 사용가능
2. 시작 정점에서부터 각 정점들 간의 최단거리
3. 최단 거리를 가진 정점을 차례로 방문하면서 
   주변 정점까지의 최단 거리를 relax하고 도착
   정점에 방문시 종료

++ 구현 방법(우선순위 큐 필요)
1. 방문한 정점의 인근 정점에 대한 완화 진행 
2. if(dist[도착 정점]>dist[출발 정점]+가중치){
        dist[도착 정점] = dist[출발 정점]+가중치
    }
3. 현재 dist[]이 최소인 정점을 방문한다.
4. 1~3을 반복하여 최단 거리를 구하고 싶은 
   정점에 도착할 때 dist[]가 return 

벨만포드 알고리즘 O(VE) 
1. 음수 가중치도 존재할 경우 사용가능 
2. 시작 정점에서부터 각 정점들 간의 최단거리
3. 정점의 갯수만큼 모든 간선을 relax 시킴

++ 구현 방법
v-1만큼 모든 간선에 대한 완화를 반복
1. 해당 간선의 출발점에 대한 dist[]를 확인
2. dist[]가 무한이 아니면 완화 진행
    if(dist[도착 정점]>dist[출발 정점]+가중치){
        dist[도착 정점] = dist[출발 정점]+가중치
    }
3. 마지막으로 모든 간선 완화가 된다면 음수사이클 
   이 존재한거고 아니면 최단 거리 구하기 성공

플로이드 워샬 알고리즘 O(N^3)
1. 각 정점들간의 최단거리를 구함 
2. dist[i][j] = min(dist[i][k]+dist[k][j]) (i<=k<=j)